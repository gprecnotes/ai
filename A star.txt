import heapq

def a_star(start, goal, graph, heuristic):
    open_list = [(0, start)]
    closed_list = set()
    g_scores = {start: 0}
    parents = {start: None}
    
    while open_list:
        f, current = heapq.heappop(open_list)
        
        if current == goal:
            path = []
            while current:
                path.append(current)
                current = parents[current]
            return path[::-1]
        
        closed_list.add(current)
        
        for neighbor in graph[current]:
            if neighbor in closed_list: continue
            
            g = g_scores[current] + graph[current][neighbor]
            
            if neighbor not in [n[1] for n in open_list]:
                heapq.heappush(open_list, (g + heuristic(neighbor, goal), neighbor))
            elif g < g_scores[neighbor]:
                i = [n[1] for n in open_list].index(neighbor)
                open_list[i] = (g + heuristic(neighbor, goal), neighbor)
            
            parents[neighbor] = current
            g_scores[neighbor] = g
    
    return None

graph = { 'A': {'B': 5, 'C': 10}, 'B': {'D': 15, 'E': 20}, 'C': {'F': 5}, 'D': {'G': 25}, 'E': {'G': 20}, 'F': {'G': 10}, 'G': {} }

def heuristic(node, goal):
    h = {'A': 35, 'B': 30, 'C': 25, 'D': 20, 'E': 15, 'F': 10, 'G': 0}
    return h[node]

start = input("Start node: ")
goal = input("Goal node: ")

path = a_star(start, goal, graph, heuristic)
if path:
    print(f"Path from {start} to {goal}:")
    print(path)
else:
    print(f"No path found from {start} to {goal}.")




output:


Start node: A
Goal node: G
Path from A to G:
['A', 'C', 'F', 'G']
