from collections import defaultdict

class GraphColoring:
    def __init__(self, vertices):
        self.graph = defaultdict(list)
        self.vertices = vertices

    def addEdge(self, u, v):
        self.graph[u].append(v)
        self.graph[v].append(u)

    def color(self):
        colors = ["red", "skyblue", "black", "white"]
        result = [-1] * self.vertices
        result[0] = colors[0]

        for v in range(1, self.vertices):
            used_colors = set()
            for u in self.graph[v]:
                if result[u] != -1:
                    used_colors.add(result[u])

            for color in colors:
                if color not in used_colors:
                    result[v] = color
                    break

        print("Vertex\tColor")
        for u in range(self.vertices):
            print(f"{u}\t{result[u]}")

# Take input from user for the number of vertices
num_vertices = int(input("Enter the number of vertices: "))
graph_obj = GraphColoring(num_vertices)

# Take input from user for edges
while True:
    edge_input = input("Enter edge (format: u,v), or 'quit' to finish: ")
    if edge_input.lower() == 'quit':
        break
    else:
        u, v = map(int, edge_input.split(','))
        graph_obj.addEdge(u, v)

# Perform graph coloring
graph_obj.color()

Output

Enter the number of vertices: 5
Enter edge (format: u,v), or 'quit' to finish: 0,1
Enter edge (format: u,v), or 'quit' to finish: 0,2
Enter edge (format: u,v), or 'quit' to finish: 1,2
Enter edge (format: u,v), or 'quit' to finish: 1,3
Enter edge (format: u,v), or 'quit' to finish: 2,4
Enter edge (format: u,v), or 'quit' to finish: 3,4
Enter edge (format: u,v), or 'quit' to finish: quit
Vertex    Color
0         red
1         skyblue
2         black
3         skyblue
4         white