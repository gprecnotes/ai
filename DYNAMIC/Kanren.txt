from kanren import run, fact, var
from kanren.assoccomm import eq_assoccomm as eq
from kanren.assoccomm import commutative, associative

addition = "add"
multiplication = "mul"
fact(commutative, multiplication)
fact(commutative, addition)
fact(associative, multiplication)
fact(associative, addition)

x, y, z = var('a'), var('b'), var('c')

# Take input from user for the original pattern
original_pattern_op = input("Enter the operation for the original pattern (add/mul): ")
original_pattern = (original_pattern_op, (input("Enter the left operand: "), x, y), z)

# Take input from user for examples
num_examples = int(input("Enter the number of examples: "))
examples = []
for _ in range(num_examples):
    example_op = input(f"Enter the operation for example {_ + 1} (add/mul): ")
    examples.append((example_op, int(input("Enter the left operand: ")), (input("Enter the nested operation: "), int(input("Enter the right operand: ")))))
    
# Perform pattern matching and print the results
for example in examples:
    result = run(0, (x, y, z), eq(original_pattern, example))
    print(result)

Enter the operation for the original pattern (add/mul): mul
Enter the left operand: (add, a, b)
Enter the right operand: c
Enter the number of examples: 3
Enter the operation for example 1 (add/mul): mul
Enter the left operand: 9
Enter the nested operation: (add, 5, 1)
Enter the operation for example 2 (add/mul): add
Enter the left operand: 5
Enter the nested operation: (mul, 8, 1)
Enter the operation for example 3 (add/mul): mul
Enter the left operand: 59
Enter the nested operation: (add, 234, 34)

[(1, 9, 5)]
[]
[(34, 59, 234)]