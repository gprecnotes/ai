from queue import PriorityQueue

def best_first_search(graph, actual_Src, target, n):
    visited = [False] * n
    pq = PriorityQueue()
    pq.put((0, actual_Src))
    visited[actual_Src] = True
    
    while not pq.empty():
        u = pq.get()[1]
        print(u, end=" ")
        
        if u == target:
            break
        
        for v, c in graph[u]:
            if not visited[v]:
                visited[v] = True
                pq.put((c, v))
        
        print()

def main():
    v = int(input("Enter the number of vertices in the graph: "))
    graph = [[] for _ in range(v)]

    e = int(input("Enter the number of edges in the graph: "))
    print("Enter edges in the format 'source destination cost':")
    for _ in range(e):
        x, y, cost = map(int, input().split())
        graph[x].append((y, cost))
        graph[y].append((x, cost))

    source = int(input("Enter the source node: "))
    target = int(input("Enter the target node: "))

    print("Best First Search Path:")
    best_first_search(graph, source, target, v)

if __name__ == "__main__":
    main()


OUTPUT

Enter the number of vertices in the graph: 14
Enter the number of edges in the graph: 13
Enter edges in the format 'source destination cost':
0 1 3
0 2 6
0 3 5
1 4 9
1 5 8
2 6 12
2 7 14
3 8 7
8 9 5
8 10 6
9 11 1
9 12 10
9 13 2
Enter the source node: 0
Enter the target node: 9
Best First Search Path:
0 1 2 3 4 5 6 7 8 9
